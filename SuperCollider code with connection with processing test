// This Project was created by the team Deep Matrix
// Which consists of the member
//
// - Eleni Kapona
// - Paolo Merlos
// - Nazariy Alshanskiy
// - Anna Kotzampasaki



s.boot
s.quit
s.scope

~net = NetAddr("127.0.0.1",47120); // send address and port


//To start off we will need to select each SynthDef there is to get the sound in the SynthDef's Section

//Then Activate the OSC Functions for processing



//SynthDef's
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

(
SynthDef(\Click,{ arg out=0, note=70, amp=0.1, pan=0.0;
	var freq, env;
	freq = note.midicps;
	env = EnvGen.ar(
		Env([5,3,0.1,0,0.01],[0.01, 0.1, 0.01]),
		levelScale:amp,
		doneAction:2
	);

	Out.ar(out,
		Pan2.ar(VarSaw.ar(freq) * env, pan)
	)
}).add;
)



(
SynthDef(\Bass,{ arg out=0, note=70, amp=0.2, pan=0.0;
	var freq, env;
	freq = note.midicps;
	env = EnvGen.ar(
		Env([0,1,5,4,3,2,0],[0.1, 0.5, 0.1]),
		levelScale:amp,
		doneAction:2
	);

	Out.ar(out,
		Pan2.ar(SinOsc.ar(XLine.ar(freq) * env, pan))
	)
}).add;
)


(
SynthDef(\Bass2,{ arg out=0, note=70, amp=0.1, pan=0.0;
	var freq, env;
	freq = note.midicps;
	env = EnvGen.ar(
		Env([0,2,1,0.1,3,2,0.01],[0.1, 0.2, 0.01]),
		levelScale:amp,
		doneAction:2
	);

	Out.ar(out,
		Pan2.ar(SinOsc.ar(XLine.ar(freq) * env, pan))
	)
}).add;
)


(
SynthDef(\High,{ arg out=0, note=60, amp=0.02, pan=0.0;
	var freq, env;
	freq = note.midicps;
	env = EnvGen.ar(
		Env([0.1,0.3,2,1,0.01],[0.01, 0.1, 0.01]),
		levelScale:amp,
		doneAction:2
	);

	Out.ar(out,
		Pan2.ar(BRF.ar(SinOsc.ar(freq) * env, pan))
	)
}).add;
)


(
SynthDef(\Piano,{ arg out=0, note=60, amp=2, pan=0.0;
	var freq, env;
	freq = note.midicps;
	env = EnvGen.ar(
		Env([0.2,0.10,0.04,0.02,0.01],[0.1,0.2,0.3, 0.1]),
		levelScale:amp,
		doneAction:2
	);

	Out.ar(out,
		Pan2.ar(LFCub.ar(freq) * env, pan)
	)
}).add;
)

(
SynthDef(\Snare,{ |freq|
var env, sig, trigger, amp;
	 env = Env.perc(level:0.5,releaseTime:0.5).
	kr(doneAction: Done.freeSelf);
	amp = 0.01;
	sig = SinOsc.ar * env;
    trigger = LFPar.ar(freq);
	sig = WhiteNoise.ar(sig, trigger) * amp;

	Out.ar(0,[sig , sig])
}).add;
)

(
SynthDef(\Wall,{ arg out=0, note=60, amp=0.01, pan=0.0;
	var freq, sig;
	freq = note.midicps;
    sig = SinOsc.ar(freq) * Line.kr(0.2,0,2,doneAction:0.2) * amp;
	Out.ar(0,[sig , sig])
}).add;
)



// Pbinds
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------




Pbind(\instrument, \Bass3, \freq, Pseq([35], inf), \dur, 4).play;

Pbind(\instrument, \Piano, \note, Pseq([69,70,76,70,77,70,65,70,73,70,76,70], inf), \dur, 1/8).play;

Pbind(\instrument, \Piano, \note, Pseq([60,70,75,70,85,70], inf), \dur, 1/4).play;

Pbind(\instrument, \High, \note, Pseq([60,70,75,70,85,70], inf), \amp, 0.03, \dur, 1/4).play;

Pbind(\instrument, \Snare, \freq, Pseq([5,50,5,5,50], inf), \dur, 1).play;

Pbind(\instrument, \Snare, \freq, Pseq([200,100,5,50,100,200,250,100], inf), \dur, 1).play;




//OSC Functions for processing
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


(
OSCFunc.newMatching({arg msg;
Pbind(\instrument, \Piano, \note, Pseq([60,70,75,70,85,70], inf), \dur, 1/4).play;
Pbind(\instrument, \Piano, \note, Pseq([69,70,76,70,77,70,65,70,73,70,76,70], inf), \dur, 1/8).play;
},"/Start"))
//If processing recieves the message on argument msg /Start play this sound
//1

(
OSCFunc.newMatching({arg msg;
Pbind(\instrument, \High, \note, Pseq([60,70,75,70,85,70], inf), \amp, 0.03, \dur, 1/4).play;
},"/Start"))
//2

(
OSCFunc.newMatching({arg msg;
Pbind(\instrument, \Snare, \freq, Pseq([200,100,5,50,100,200,250,100], inf), \dur, 1).play;
Pbind(\instrument, \Bass3, \freq, Pseq([35], inf), \dur, 4).play;
Pbind(\instrument, \Snare, \freq, Pseq([5,50,5,5,50], inf), \dur, 1).play;
},"/Start"))
//3




(
OSCFunc.newMatching({arg msg0;
	var amp = msg0[1];
	var freq = msg0[2];
	Synth(\Wall,[\amp,amp,\freq,70]);
},"/Wall"))

(
OSCFunc.newMatching({arg msg2;
	Synth(\Click,\note);
},"/Click"))

//If processing recieves the message on argument msg /Blimp/play each time the ball will hit the end of the screen it will play the sound depending on freq, amp and env.



