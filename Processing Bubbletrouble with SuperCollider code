// A simplified version of the game Bubble Trouble
// Hit the Balls using your mouse while the bubbles create sound.

import netP5.*;
import oscP5.*;




// Our global variables and objects
int ballsCounter;    // Keep track of the amount of Balls in game
int minimumSize;     // The minimal size of a Ball
Ball[] balls;    // An array with Balls


void setup() { 
  size(800, 800); 
  smooth();
  frameRate(144);

 OscProperties osc_properties = new OscProperties();
  osc_properties.setListeningPort(47120);
  
  osc = new OscP5(this,osc_properties);
  supercollider = new NetAddress("127.0.0.1", 57120); // Listening port on supercollider

  // Initialize our variables and objects
  ballsCounter = 0;
  minimumSize = 60;
  balls = new Ball[32];
  balls[0] = new Ball(width/2, 300, 256, 2);



} 

void draw() { 
  background(255); 

  // Run Ball objects
  for (int i = 0; i < balls.length; i++) {
    if (balls[i] != null) {
      balls[i].run();
      // If it has been shot -> delete it
      // Only spawn 2 new Balls if they are above the minimal size
      if (balls[i].MouseTrigger && ballsCounter < balls.length) {
        if (balls[i].w > minimumSize) {
          ballsCounter++;
          balls[ballsCounter] = new Ball(balls[i].xPos, balls[i].yPos, balls[i].w/3*2, 2);
          ballsCounter++;
          balls[ballsCounter] = new Ball(balls[i].xPos, balls[i].yPos, balls[i].w/3*2, -2);
        }
        // We 'delete' a Ball by setting the object to null
        balls[i] = null;
      }
    }
  }
}




// New Code
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------



import netP5.*;
import oscP5.*;
OscP5 osc;
NetAddress supercollider;

PImage img;



// Our global variables and objects
int ballsCounter= 10; // Keep track of the amount of Balls in game
int minimumSize = 20;    // Keep track of the amount of Balls in game 
   // The minimal size of a Ball
ArrayList<Ball> balls = new ArrayList<Ball>();  // An array with Balls



void setup() { 
  size(1422, 800); 
  smooth();
  frameRate(144);
  img = loadImage("image.jpg");

 OscProperties osc_properties = new OscProperties();
  osc_properties.setListeningPort(47120);
  
  osc = new OscP5(this,osc_properties);
  supercollider = new NetAddress("127.0.0.1", 57120); // Listening port on supercollider

  // Initialize our variables and objects

balls.add(new Ball(width/2, 300, 256, 2));


}



void draw() { 
  background(img);
  if (mouseButton == RIGHT) {
     OscMessage msg = new OscMessage("/Start"); // if message received 
     osc.send(msg,  supercollider); }
     if (keyPressed) { if (key == 'x' || key == 'X') {
      OscMessage msg1 = new OscMessage("/kick"); // if message received 
     osc.send(msg1,  supercollider);
     
     }}
    // Run all Ball objects
  for (int i = 0; i < balls.size(); i++) { 
    if ( i <= ballsCounter)
    balls.get(i).run(); {
 if (i == ballsCounter)
      balls.remove(i);
      
  }
  }
  }





void mousePressed() { if (mouseButton == LEFT){
      // If it has been clicked -> delete it
      // Only spawn 2 new Balls if they are above the minimal size 
        for (int i = 0; i < balls.size(); i++) { 
         
          Ball ball = balls.get(i); 
          

          if (dist(ball.xPos, ball.yPos, mouseX, mouseY) < 100) {// take into account the distance between the two points
            balls.add(new Ball(ball.xPos, ball.yPos, ball.w/3*2, 2));
            balls.add(new Ball(ball.xPos, ball.yPos, ball.w/3*2, -2));
            balls.remove(i); // delete ball   
              
       
          
            
            
            
            break; // important so that we stop here
          }
        }
     }
}
