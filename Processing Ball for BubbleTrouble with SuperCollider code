// A Ball that falls by simulating some degree gravity
import netP5.*;
import oscP5.*;


color c = color(random(255), random(255), random(255));

class Ball {

  float xPos, yPos;       // x and y location of the ball 
  float w;          // width of the ball
  float speedX, speedY;   // x and yspeed of the ball
  float gravity = 0.1;    // gravity variable
  boolean MouseTrigger;    // whether the ball has been clicked by the mouse

  // Ball constuctor with 4 parameters:
  // the x location, y location, width and horizontal speed
  Ball(float tempX, float tempY, float tempW, float tempSpeedX) {
    xPos = tempX;
    yPos = tempY;
    w = tempW;
    speedY = -5;
    speedX = tempSpeedX;
    MouseTrigger = false;
  }

  // Run this object
  void run() {
    display();
    update();
    mousePressed();
  }

  // Draw the Ball
  void display() {
    fill(c,85); 
    stroke(0); 
    ellipse(xPos, yPos, w, w);
  }

  void update() {
    // Add speedX and speedY to location
    yPos = yPos + speedY;
    xPos = xPos + speedX;
    // Add gravity to speedY
    speedY = speedY + gravity; 

    // If the ball reaches the bottom or one of the sides
    // Reverse speedY or speedX
    float freq = xPos;
        float amp = speedX;
          OscMessage msg = new OscMessage("/Blimp/play"); // if message received /mouseZ

    if (yPos > height - w/2) { 
      speedY = speedY * -0.95;
      yPos = height - w/2;
    }
    if (freq > width - w/2 || freq < w/2) {

      speedX = amp * -1; 
          msg.add(freq*2);
             msg.add(amp);
      osc.send(msg,  supercollider);
               
    }
    }
  
  

  // Check whether the Ball been hit by a Missile
  // (The collision detection is not very accurate, 
  // but it suffices for the purposes of this game)

    //w = width of the ball
 //xPos, yPos;   x and y location of the ball
 // find mouseX and mouseY and if mouseButton Left clicks ball than MouseTrigger becomes true.
 void mousePressed() {
    if (mouseButton == LEFT && mouseX>xPos-w/2 && mouseX<xPos+w/2 && mouseY<yPos+w/2 && mouseY>yPos-w/2) { 
      MouseTrigger = true;
      
}
}
}














//New Code--------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------



// A Ball that falls by simulating some degree gravity
import netP5.*;
import oscP5.*;


color c = color(random(255), random(255), random(255));

class Ball {

  float xPos, yPos;       // x and y location of the ball 
  float w;          // width of the ball
  float speedX, speedY;   // x and yspeed of the ball
  float gravity = 0.1;    // gravity variable
  boolean MouseTrigger;    // whether the ball has been clicked by the mouse

  // Ball constuctor with 4 parameters:
  // the x location, y location, width and horizontal speed
  Ball(float tempX, float tempY, float tempW, float tempSpeedX) {
    xPos = tempX;
    yPos = tempY;
    w = tempW;
    speedY = -5;
    speedX = tempSpeedX;
    MouseTrigger = false;
  }

  // Run this object
  void run() {
    display();
    update();
    mousePressed();
  }

  // Draw the Ball
  void display() {
    fill(c,85); 
    stroke(0); 
    ellipse(xPos, yPos, w, w);
  }

  void update() {
    // Add speedX and speedY to location
    yPos = yPos + speedY;
    xPos = xPos + speedX;
    // Add gravity to speedY
    speedY = speedY + gravity; 

    // If the ball reaches the bottom or one of the sides
    // Reverse speedY or speedX

          OscMessage msg = new OscMessage("/Wall"); // if message received /Wall
    float freq = w;  // freq = w; hits width  msg.add (Freq/2); (amp/12);
    float amp = w;   // amp = w;
    
    if (yPos > height - w/2) {  
      speedY = speedY * -0.95;
      yPos = height - w/2;
    }
    if (xPos > width - w/2 || xPos < w/2) { 

      speedX = speedX * -1; 
             msg.add(freq/2);
             msg.add(amp/12);
      osc.send(msg,  supercollider);
               
    }
    }
  
  



//w = width of the ball
//xPos, yPos;   x and y location of the ball
// find mouseX and mouseY and if mouseButton Left clicks ball than MouseTrigger becomes true.
 void mousePressed() {
    if (mouseButton == LEFT && mouseX>xPos-w/2 && mouseX<xPos+w/2 && mouseY<yPos+w/2 && mouseY>yPos-w/2) { 
      MouseTrigger = true;
      
}
}
}
